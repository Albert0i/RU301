version: "3"

networks:
  re_cluster:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "192.168.1.0/24"

services:
  #Node 1
  re1:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}
    ports:
      - 7000:6379
    container_name: re1
    restart: unless-stopped    
    volumes:
      - ./conf:/usr/local/etc/redis:ro
      - ./7000:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_cluster:
        ipv4_address: 192.168.1.11

  #Node 2
  re2:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}
    ports:
      - 7001:6379
    container_name: re2
    restart: unless-stopped    
    volumes:
      - ./conf:/usr/local/etc/redis:ro
      - ./7001:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_cluster:
        ipv4_address: 192.168.1.12

  #Node 3
  re3:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}
    ports:
      - 7002:6379
    container_name: re3
    restart: unless-stopped    
    volumes:
      - ./conf:/usr/local/etc/redis:ro
      - ./7002:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_cluster:
        ipv4_address: 192.168.1.13

#Node 4
  re4:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}
    ports:
      - 7003:6379
    container_name: re4
    restart: unless-stopped    
    volumes:
      - ./conf:/usr/local/etc/redis:ro
      - ./7003:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_cluster:
        ipv4_address: 192.168.1.14

#Node 5
  re5:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}
    ports:
      - 7004:6379
    container_name: re5
    restart: unless-stopped    
    volumes:
      - ./conf:/usr/local/etc/redis:ro
      - ./7004:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_cluster:
        ipv4_address: 192.168.1.15

#Node 6
  re6:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}
    ports:
      - 7005:6379
    container_name: re6
    restart: unless-stopped    
    volumes:
      - ./conf:/usr/local/etc/redis:ro
      - ./7005:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_cluster:
        ipv4_address: 192.168.1.16

#Creator
  creator:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}
    container_name: creator
    restart: unless-stopped    
    volumes:
      - ./conf:/usr/local/etc/redis:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_cluster:
        ipv4_address: 192.168.1.199
    depends_on:
      - re1
      - re2
      - re3
      - re4
      - re5
      - re6

# Redis Insight
  redisinsight:
    image: redis/redisinsight:2.50
    container_name: redisinsight
    ports:
      - 5540:5540
    restart: unless-stopped    
    volumes:
      - ./5540:/data:rw
    networks:
      re_cluster:
        ipv4_address: 192.168.1.198
    depends_on:
      - re1
      - re2
      - re3
      - re4
      - re5
      - re6

#
# redis
# https://hub.docker.com/_/redis
#
# redis/redisinsight
# https://hub.docker.com/r/redis/redisinsight
#
# Next, point your browser to http://localhost:5540.
# Redis Insight also provides a health check endpoint at http://localhost:5540/api/health/ 
# to monitor the health of the running container.
#
# Redis configuration file example
# https://redis.io/docs/latest/operate/oss_and_stack/management/config-file/
# 
########################## CLUSTER DOCKER/NAT support  ########################
#
# In certain deployments, Redis Cluster nodes address discovery fails, because
# addresses are NAT-ted or because ports are forwarded (the typical case is
# Docker and other containers).
#
# In order to make Redis Cluster working in such environments, a static
# configuration where each node knows its public address is needed. The
# following four options are used for this scope, and are:
#
# * cluster-announce-ip
# * cluster-announce-port
# * cluster-announce-tls-port
# * cluster-announce-bus-port
#
# Each instructs the node about its address, client ports (for connections
# without and with TLS) and cluster message bus port. The information is then
# published in the header of the bus packets so that other nodes will be able to
# correctly map the address of the node publishing the information.
#
# If tls-cluster is set to yes and cluster-announce-tls-port is omitted or set
# to zero, then cluster-announce-port refers to the TLS port. Note also that
# cluster-announce-tls-port has no effect if tls-cluster is set to no.
#
# If the above options are not used, the normal Redis Cluster auto-detection
# will be used instead.
#
# Note that when remapped, the bus port may not be at the fixed offset of
# clients port + 10000, so you can specify any port and bus-port depending
# on how they get remapped. If the bus-port is not set, a fixed offset of
# 10000 will be used as usual.
#
# Example:
#
# cluster-announce-ip 10.1.1.5
# cluster-announce-tls-port 6379
# cluster-announce-port 0
# cluster-announce-bus-port 6380
#

#
# EOF (2024/06/01)
# 
